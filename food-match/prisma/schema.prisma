// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  identifier String   @id
  token      String
  attempts   Int      @default(0)
  expires    DateTime
}

model User {
  id                   String     @id @default(uuid())
  name                 String?
  dob                  DateTime?  @db.Date
  email                String?    @unique
  emailVerified        DateTime?  @db.Timestamptz(3)
  mobile               String?
  mobileVerified       DateTime?  @db.Timestamptz(3)
  image                String?
  createdAt            DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime   @default(now()) @updatedAt @db.Timestamptz(3)
  deletedAt            DateTime?  @db.Timestamptz(3)
  // donations made by the user
  donationsDonor       Donation[] @relation(name: "DonationToDonor")
  // donations received by the user
  donationsBeneficiary Donation[] @relation(name: "DonationToBeneficiary")

  @@index([name])
  @@index([email])
}

model Donation {
  id            String    @id @default(uuid())
  name          String
  tags          Tag[]     @relation(name: "DonationTags")
  tagsIds       String[]
  imageUrls     String[]
  description   String
  vector        Float[]
  // if it doesn't expire we can set it to a far future date
  expiry        DateTime  @db.Timestamptz(3)
  // quantity as string so donor can write the units, e.g. 1kg, 1L, 1 packet
  quantity      String
  // generated passcode for the beneficiary to claim the donation
  passCode      String?
  // might need to consider what happens if beneficiary doesn't claim the donation but future implementation
  donor         User      @relation(name: "DonationToDonor", fields: [donorId], references: [id])
  donorId       String
  beneficiary   User?     @relation(name: "DonationToBeneficiary", fields: [beneficiaryId], references: [id])
  beneficiaryId String?
  // can consider storing name in vector for search so that it doesn't need to be recomputed
  // vector
  createdAt     DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime  @default(now()) @updatedAt @db.Timestamptz(3)
  deletedAt     DateTime? @db.Timestamptz(3)

  @@index([donorId])
  @@index([beneficiaryId])
  @@index([expiry])
  @@index([tagsIds])
}

model Tag {
  id        String     @id @default(uuid())
  name      String
  donations Donation[] @relation(name: "DonationTags")
}
